parameters:
  - name: subscriptionName
    type: string
  - name: product
    type: string
  - name: environment
    type: string
  - name: domain
    type: string
  - name: keyVaultName
    type: string

steps:

  - task: AzureCLI@2
    displayName: Add KeyVault FW Exception
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        while ( !$ip ) { $ip = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content }
        write-host "Our IP address is: $ip"
        az keyvault network-rule add --name $env:keyVaultName --ip-address "$IP/32"

        $ready = 1; $retry = 0
        while($ready -ne 0 -and $retry -lt 10) {
          sleep (15 * $retry++)  
          try{          
            write-host "checking keyvault access"
            az keyvault secret list --vault-name $env:keyVaultName | out-null
            $ready = $LASTEXITCODE    
          } catch {
            $ready = 1
          }        
        }
    env:
      keyVaultName: ${{ parameters.keyVaultName }}

  - template: purge.yaml
    parameters:
      subscriptionName: ${{ parameters.subscriptionName }}
      keyVaultName: ${{ parameters.keyVaultName }}
      certificateName: "${{ parameters.product }}-${{ parameters.environment }}-le-cert"

  - task: AzureCLI@2
    displayName: 'Check if Cert expired in ${{ parameters.keyVaultName }}'
    name: cert
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |

        $env="${{ parameters.environment }}"
        $product="${{ parameters.product }}"
        $keyVaultName="${{ parameters.keyVaultName }}"
        $certName="$product-$env-le-cert"

        $exportedCerts = az keyvault certificate list --vault-name $keyVaultName --query "[? name=='$certName']" -o json | ConvertFrom-Json

        $expired=$false
        if ($null -ne $exportedCerts -and $exportedCerts.length -gt 0){
          Write-Host "Certificate Found"
          $exportedCert = $exportedCerts[0]

          Write-Host "Certificate Expires $($exportedCert.attributes.expires)"
          $expiryDate=(get-date $exportedCert.attributes.expires).AddDays(-14)
          Write-Host "Certificate Forced Expiry is $expiryDate"
          
          if ($expiryDate -lt (get-date)){
            Write-Host "Certificate has expired"
            $expired=$true
          } else {
            Write-Host "Certificate has NOT expired"
          }

        } else {
          Write-Host "Certificate NOT Found"
          $expired=$true
        }

        Write-Host "##vso[task.setvariable variable=expired;isOutput=true]$expired"