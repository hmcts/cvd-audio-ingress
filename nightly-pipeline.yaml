trigger:
  - none

pr: 
  - none

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

schedules:
- cron: "0 1 * * *"
  displayName: Nightly
  branches:
    include:
    - master
  always: true
- cron: "0 2 1 * *"
  displayName: Monthly
  branches:
    include:
    - master
  always: true

parameters:
  - name: envs
    displayName: Environments
    type: object
    values: []
    default: ['sbox','stg','prod']

variables:
  cvpPipelineUrl: "https://dev.azure.com/hmcts/Shared%20Services/_build?definitionId=337&_a=summary"
  cvpName: "CVP Audio Ingress"

stages:
  - stage: 'GetDependencies'
    displayName: 'Get Dependency Details'
    dependsOn: []
    pool:
      vmImage: ubuntu-latest
    variables:
      - group: cvp-common
    jobs:
      - job: GetScheduleName
        displayName: 'Get Schedule Name'
        steps: 
          - download: none
          - checkout: none
          - template: templates\common\pipeline-details.yml@azTemplates
            parameters:
              buildId: $(Build.BuildId)
              patToken: $(pipelinePAT)
              propertyName: ".triggerInfo.scheduleName"
              variableName: "scheduleName"
              taskName: 'buildDetail'

  - template: pipeline/stages/build.yaml
    parameters:
      dependsOnEnv: GetDependencies
      condition: eq(dependencies.GetDependencies.outputs['GetScheduleName.buildDetail.scheduleName'], 'Nightly' )

  - ${{each env in parameters.envs}}:
    - template: pipeline/stages/plan.yaml
      parameters:
        env: ${{env}}
  
  - ${{each env in parameters.envs}}:
    - stage: 'Validate${{env}}'
      displayName: 'Validate ${{env}}'
      dependsOn: 'Plan${{env}}'
      pool:
        vmImage: ubuntu-latest
      variables:
        - template: pipeline/variables/variables-common.yaml
        - template: pipeline/variables/variables-${{env}}.yaml
        - group: cvp-${{env}}
      jobs:
        - job: ValidateChanges${{env}}
          displayName: '${{env}} Terraform changes'
          steps: 
            - download: current
              artifact: '${{env}}.tfplan'
              displayName: 'Download ${{env}} Plan file'

            - template: pipeline/steps/tf-show.yml
              parameters: 
                planOrStateFilePath: "$(Pipeline.Workspace)/${{env}}.tfplan/${{env}}.tfplan"
                outputLocation: "$(Pipeline.Workspace)/${{env}}.json"
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                location: ${{variables.location}}
                locationEng: ${{variables.locationEng}}
                product: ${{variables.product}}

            - task: PowerShell@2
              name: 'terraChanges'
              displayName: 'Validate any changes'
              inputs:
                targetType: 'inline'
                script: |
                  $environment = "${{env}}"
                  $planObj = Get-Content "$(Pipeline.Workspace)/${{env}}.json" | ConvertFrom-Json
                  $resourceChanges = $planObj.resource_changes

                  $addChanges = ($resourceChanges | Where {$_.change.actions -contains "create"}).length
                  $changeChanges = ($resourceChanges | Where {$_.change.actions -contains "update"}).length
                  $removeChanges = ($resourceChanges | Where {$_.change.actions -contains "delete"}).length
                  $totalChanges = $addChanges + $changeChanges + $removeChanges

                  $msg = "There are $totalChanges ($addChanges to add, $changeChanges to change, $removeChanges to remove) in the $environment Environment on CVP Audio Ingress"
                  Write-Host $msg

                  $sendMsg = (&{If($addChanges -gt 0 -or $changeChanges -gt 0 -or $removeChanges -gt 0) {"true"} Else {"false"}})
                  Write-Host "Should send message: $sendMsg"

                  Write-Host "##vso[task.setvariable variable=sendMsg;isOutput=true]$sendMsg"
                  Write-Host "##vso[task.setvariable variable=msg;isOutput=true]$msg"
            
            - template: templates\Azure\LogicApp\send-pipeline-alert.yaml@azTemplates
              parameters:
                logicAppUrl: $(logic_app_url)
                title: "Terraform Changes in ${{env}}"
                message: "$(terraChanges.msg)"
                conditionAction: $(terraChanges.sendMsg)
                pipelineUrl: ${{ variables.cvpPipelineUrl }}
                projectName: ${{ variables.cvpName }}
                
        - job: ValidateWowzaVersion${{env}}
          displayName: '${{env}} wowza image version'
          steps: 
            - checkout: none
            - download: none

            - task: AzureCLI@2
              name: 'wowzaCheck'
              displayName: Check wowza version
              inputs:
                azureSubscription: '${{variables.subscriptionName}}'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  publisher="${{variables.wowza_publisher}}"
                  offer="${{variables.wowza_offer}}"
                  sku="${{variables.wowza_sku}}"

                  latest=$(az vm image list -p $publisher -s $sku --all --query "([?offer=='$offer'].version)[0]" -o tsv)
                  echo "The Latest version is ${latest}"

                  service_name="${{variables.product}}-recordings-${{env}}-"
                  rgName="${service_name}rg"
                  vmName="${service_name}vm1"
                  current=$(az vm show --resource-group $rgName --name $vmName --query "storageProfile.imageReference.version" -o tsv)
                  echo "The Current version is ${current}"

                  verlte() {
                      [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
                  }
                  verlt() {
                      [ "$1" = "$2" ] && return 1 || verlte $1 $2
                  }
                  verlt $current $latest && upgradeRequired=true || upgradeRequired=false


                  msg="The ${{env}} Wowza version needs upgrading from ${current} to ${latest}"
                  echo $msg

                  echo "##vso[task.setvariable variable=sendMsg;isOutput=true]${upgradeRequired}"
                  echo "##vso[task.setvariable variable=msg;isOutput=true]${msg}"
                  
            - template: templates\Azure\LogicApp\send-pipeline-alert.yaml@azTemplates
              parameters:
                logicAppUrl: $(logic_app_url)
                title: "Wowza version upgrade in ${{env}}"
                message: "$(wowzaCheck.msg)"
                conditionAction: $(wowzaCheck.sendMsg)
                pipelineUrl: ${{ variables.cvpPipelineUrl }}
                projectName: ${{ variables.cvpName }}

        - job: Clean${{env}}
          displayName: 'Clean ${{env}} down'
          steps: 
            - checkout: none
            - download: none
            
            - template: pipeline/steps/az-nsg-update-source.yml
              parameters: 
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                resourceGroupName: "${{variables.product}}-recordings-${{variables.env}}-rg"
                nsgName: "${{variables.product}}-recordings-${{variables.env}}-sg"
                nsgRuleName: "RTMPS_Dev"
                sourceAddressPrefixes: "${{ variables.dev_source_address_prefixes }}"

        - job: CheckPipelineRun
          displayName: 'Check Pipelines have run'
          steps: 
            - download: none
            - checkout: none

            - task: AzureCLI@2
              name: 'deployment_Check'
              displayName: Check Last Run
              inputs:
                azureSubscription: '${{variables.subscriptionName}}'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |

                  $maxNoneRunDays=65
                  $blob=az storage blob show -c deployment -n deployment-flag.txt --account-name ${{variables.product}}recordings${{variables.env}}sa -o json --only-show-errors | ConvertFrom-Json

                  $currentDate=Get-Date
                  $lastRunDate=Get-Date -Date $blob.properties.lastModified
                  Write-Host "Current Date: $currentDate"
                  Write-Host "Last Run Date: $lastRunDate"

                  $diff=(New-TimeSpan -Start $lastRunDate -End $currentDate)
                  Write-Host "Difference $diff"

                  $msg="The ${{env}} pipeline has not run in last $maxNoneRunDays days"
                  echo $msg

                  $upgradeRequired=($diff.Days -gt $maxNoneRunDays)
                  
                  Write-Host "##vso[task.setvariable variable=sendMsg;isOutput=true]$upgradeRequired"
                  Write-Host "##vso[task.setvariable variable=msg;isOutput=true]$msg"
            
            - template: templates\Azure\LogicApp\send-pipeline-alert.yaml@azTemplates
              parameters:
                logicAppUrl: $(logic_app_url)
                title: "${{env}} not run alert"
                message: "$(deployment_Check.msg)"
                conditionAction: $(deployment_Check.sendMsg)
                pipelineUrl: ${{ variables.cvpPipelineUrl }}
                projectName: ${{ variables.cvpName }}

  - ${{each env in parameters.envs}}:
    - stage: '${{env}}HouseKeeper'
      displayName: '${{env}} House Keeper Tasks'
      condition: eq(dependencies.GetDependencies.outputs['GetScheduleName.buildDetail.scheduleName'], 'Monthly' )
      pool:
        vmImage: ubuntu-latest
      dependsOn: GetDependencies
      variables:
        - template: pipeline/variables/variables-common.yaml
        - template: pipeline/variables/variables-${{env}}.yaml
        - group: cvp-${{env}}
      jobs:
        - job: ${{env}}ClearKv
          displayName: '${{env}} Key Vault'
          steps: 
            - download: none
            - checkout: none
            - template: templates\keyvault\pruneNetworkRules.yaml@azTemplates
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                resourceGroupName: "${{variables.product}}-sharedinfra-${{env}}"
                keyVaultName: "${{variables.product}}-${{env}}-kv"
