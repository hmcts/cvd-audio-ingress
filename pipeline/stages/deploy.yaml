parameters:
  - name: env
    type: string
    default: 'sbox'
  - name: runStage
    type: string
    default: 'false'

stages:
  - ${{ if and(eq(parameters.runStage, true), ne(parameters.env, 'sbox') )}}:
    - stage: Wait${{parameters.env}}
      displayName: '${{parameters.env}} Waiting for Approval'
      condition: succeeded()
      dependsOn: Plan${{parameters.env}}
      pool:
        vmImage: 'ubuntu-latest'
      jobs:
        - job: waitForValidation
          displayName: '${{parameters.env}} Wait for external validation'
          pool: server
          timeoutInMinutes: 4320 # job times out in 3 days
          steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              instructions: 'Please validate the Terraform Plan for PROD environment to resume'
              onTimeout: 'reject'
  - ${{ if eq(parameters.runStage, true)}}:
    - stage: Apply${{parameters.env}}
      displayName: 'Apply to ${{parameters.env}}'
      pool:
        vmImage: 'ubuntu-latest'
      ${{ if eq(parameters.env, 'sbox')  }}:
        dependsOn: Plan${{parameters.env}}
      ${{ if ne(parameters.env, 'sbox') }}:
        dependsOn: Wait${{parameters.env}}
      condition: succeeded()
      variables:
        - template: ../variables/variables-common.yaml
        - template: ../variables/variables-${{parameters.env}}.yaml
        - group: cvp-${{parameters.env}}
      jobs:
        - job: VmOn${{parameters.env}}
          displayName: 'Turn on VMs'
          steps:
          - task: AzureCLI@2
            name: 'VmOn${{parameters.env}}'
            displayName: 'Turning Vm On ${{parameters.env}}'
            condition: always()
            inputs:
              azureSubscription: '${{variables.subscriptionName}}'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $resourcegroup="cvp-recordings-${{parameters.env}}-rg"
                $rgExists = az group exists --name $resourcegroup
                
                if ( $rgExists )
                {
                  Write-Output "$resourcegroup does exist in subscription"
                  $vmList = az vm list --resource-group $resourcegroup  --query "[].{name:name}"  | ConvertFrom-Json
                  $vmListCnt=$vmList.Count 
                  Write-Output "$vmListCnt found in resource group"
                  $timeToSleep = 1
                  foreach ($vm in $vmList) {
                      $vmName= $vm.name
                      $vmDetails = az vm get-instance-view --name $vmName --resource-group $resourcegroup | ConvertFrom-Json
                      $statusVm = $vmDetails.instanceView.statuses[1].Code
                      Write-Output "Initial status for VM '$vmName'= $statusVm"
                      if ( "PowerState/deallocated","PowerState/deallocating","PowerState/stopped","PowerState/stopping","PowerState/unknown" -contains $statusVm){
                        Write-Output "Starting VM '$vmName'"
                        az vm start --name $vmName --resource-group $resourcegroup
                        Write-Output "Mount wowza by running script on target vm; sudo sh /home/wowza/wowza-mount.sh"
                        az vm run-command invoke -g $resourcegroup -n $vmName  --command-id RunShellScript --scripts "sudo sh /home/wowza/wowza-mount.sh"
                        Write-Output ""
                        $timeToSleep = 90
                      }
                  }
                  Start-Sleep -s $timeToSleep   
                }else
                {
                    Write-Output "$resourcegroup does not exist in subscription"
                }

                Write-Output "Stage finished: Turning Vm On"

        - job: ApplyTfToEnv
          displayName: 'Terraform to ${{parameters.env}}'
          dependsOn: 'VmOn${{parameters.env}}'
          steps:
                
            - template: ../steps/tf-install.yaml

            - template: ../steps/tf-apply.yaml
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                location: ${{variables.location}}
                locationEng: ${{variables.locationEng}}
                product: ${{variables.product}}
                wowza_version: ${{variables.wowza_version}}

        - job: ApplyExtToEnv
          displayName: 'Extensions to ${{parameters.env}}'
          dependsOn: ApplyTfToEnv
          steps:
            - template: ../steps/az-ext-oms.yaml
              parameters:
                subscription: ${{variables.subscriptionName}}
                vmNames: ["${{variables.product}}-recordings-${{variables.env}}-vm1","${{variables.product}}-recordings-${{variables.env}}-vm2" ]
                vmRgName: "${{variables.product}}-recordings-${{variables.env}}-rg"
                env: ${{variables.env}}

            - template: ../steps/az-ext-dynatrace-api.yaml
              parameters:
                subscription: ${{variables.subscriptionName}}
                vmNames: ["${{variables.product}}-recordings-${{variables.env}}-vm1","${{variables.product}}-recordings-${{variables.env}}-vm2" ]
                vmRgName: "${{upper(variables.product)}}-RECORDINGS-${{upper(variables.env)}}-RG"
                env: ${{variables.env}}