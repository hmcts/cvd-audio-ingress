parameters:
  - name: env
    type: string
    default: 'sbox'
  - name: dependsOnEnv
    type: string
    default: ''
  - name: runStage
    type: string
    default: 'true'

stages:
  - ${{ if eq(parameters.runStage, true)}}:
    - stage: 'Plan${{parameters.env}}'
      displayName: 'Plan ${{parameters.env}}'
      ${{ if eq(parameters.dependsOnEnv, '') }}:
        dependsOn: Build
      ${{ if eq(parameters.dependsOnEnv, 'sbox') }}:
        dependsOn: 'Test${{parameters.dependsOnEnv}}'
      ${{ if eq(parameters.dependsOnEnv, 'stg') }}:
        dependsOn: 'Test${{parameters.dependsOnEnv}}'
      pool:
        vmImage: 'ubuntu-latest'
      condition: succeeded()
      variables:
        - template: ../variables/variables-common.yaml
        - template: ../variables/variables-${{parameters.env}}.yaml
        - group: cvp-${{parameters.env}}
      jobs:
        - job: VmOn${{parameters.env}}
          displayName: 'Turn on VMs'
          steps:
          - task: AzureCLI@2
            name: 'VmOn${{parameters.env}}'
            displayName: 'Turning Vm On ${{parameters.env}}'
            condition: always()
            inputs:
              azureSubscription: '${{variables.subscriptionName}}'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $auto_acc_change_vm_status="$env:AUTO_ACC_CHANGE_VM_STATUS"
                $vm_resting_state_on="$env:VM_RESTING_STATE_ON"
                $resourcegroup="cvp-recordings-${{parameters.env}}-rg"
                $vm1 = "cvp-recordings-${{parameters.env}}-vm1" 
                $vm2 = "cvp-recordings-${{parameters.env}}-vm2" 
                $vm1Details = az vm get-instance-view --name $vm1 --resource-group $resourcegroup | ConvertFrom-Json
                $vm2Details = az vm get-instance-view --name $vm2 --resource-group $resourcegroup | ConvertFrom-Json
                $statusVm1 = $vm1Details.instanceView.statuses[1].Code
                $statusVm2 = $vm2Details.instanceView.statuses[1].Code
                Write-Output "Initial VM status for '$vm1'= $statusVm1"
                Write-Output "Initial VM status for '$vm1'= $statusVm1 "
                Write-Output "Should state be altered: $auto_acc_change_vm_status"
                Write-Output "Should resting state be off: $vm_resting_state_on"

                if ( $auto_acc_change_vm_status -eq $true -and "PowerState/deallocated","PowerState/deallocating","PowerState/stopped","PowerState/stopping","PowerState/unknown" -contains $statusVm1){
                  Write-Output "Starting VM '$vm1'"
                  az vm start --name $vm1 --resource-group $resourcegroup
                }
                Write-Output "Initial VM status for '$vm2'= $statusVm2"
                if ( $auto_acc_change_vm_status -eq $true -and "PowerState/deallocated","PowerState/deallocating","PowerState/stopped","PowerState/stopping","PowerState/unknown" -contains $statusVm2){
                  Write-Output "Starting VM '$vm2'"
                  az vm start --name $vm2 --resource-group $resourcegroup
                }
        - job: PlanToEnv${{parameters.env}}
          displayName: 'Plan to ${{parameters.env}}'
          dependsOn: 'VmOn${{parameters.env}}'
          steps:
            - template: ../steps/tf-install.yaml
            - template: ../steps/tf-init.yaml
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                location: ${{variables.location}}
                locationEng: ${{variables.locationEng}}
                product: ${{variables.product}}
                useBackend: true
            
            - template: templates\Azure\Common\unlock-resource.yml@azTemplates
              parameters:
                subscriptionName:  ${{variables.subscriptionName}}
                resourceName: "${{variables.product}}recordings${{variables.env}}sa"
                resourceGroupName: "${{variables.product}}-recordings-${{variables.env}}-rg"
                lockName: "resource-sa"
                resourceType: "Microsoft.Storage/storageAccounts"
            - template: templates\Azure\Common\unlock-resource-group.yml@azTemplates
              parameters:
                subscriptionName:  ${{variables.subscriptionName}}
                resourceGroupName: "${{variables.product}}-recordings-${{variables.env}}-rg"
                lockName: "${{variables.env}}-lock"
            - template: templates\Azure\Common\unlock-resource-group.yml@azTemplates
              parameters:
                subscriptionName:  ${{variables.subscriptionName}}
                resourceGroupName: "managed-identities-${{variables.env}}-rg"
                lockName: "${{variables.env}}-lock"

            - template: ../steps/tf-plan.yaml
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                location: ${{variables.location}}
                product: ${{variables.product}}
                builtFrom: $(Build.Repository.Name)
                # Manually passed in for use in scripts where resources are tagged
                businessArea: ${{variables.businessArea}}
                application: ${{variables.application}}

        - job: CertGen${{parameters.env}}
          displayName: 'Generate Certificate for ${{parameters.env}}'
          dependsOn: 'VmOn${{parameters.env}}'
          steps:
            - template: templates\Azure\Certificates\Request.yaml@azTemplates
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                product: "cvp"
                environment: ${{parameters.env}}
                domain: "${{ variables.dns }}"
                keyVaultName: "cvp-${{parameters.env}}-kv"