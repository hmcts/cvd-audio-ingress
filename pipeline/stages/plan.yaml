parameters:
  - name: env
    type: string
    default: 'sbox'
  - name: dependsOnEnv
    type: string
    default: ''

stages:
  - stage: 'Plan${{parameters.env}}'
    displayName: 'Plan ${{parameters.env}}'
    pool:
      vmImage: 'ubuntu-latest'
    ${{ if eq(parameters.dependsOnEnv, '') }}:
      dependsOn: Build
    ${{ if ne(parameters.dependsOnEnv, '') }}:
      dependsOn: 'Test${{parameters.dependsOnEnv}}'
    variables:
      - template: ../variables/variables-common.yaml
      - template: ../variables/variables-${{parameters.env}}.yaml
      - group: cvp-${{parameters.env}}
    jobs:
      - job: PlanToEnv${{parameters.env}}
        displayName: 'Plan to ${{parameters.env}}'
        steps:
          - task: AzureCLI@2
            displayName: Getting add vnet link 
            inputs:
              azureSubscription: ${{ parameters.subscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $subscriptionName="DTS-CFTPTL-INTSVC"
                $subId=az account show -s $subscriptionName --query "id" -o tsv

                $resourceGroupName="core-infra-intsvc-rg"
                $location="Global"

                $privateDnsName="privatelink.blob.core.windows.net"

                $virtualNetworkLinkName="cvpsbox"

                $virtualNetworkName="cvp-recordings-sbox-vnet"
                $virtualNetworkRg="cvp-recordings-sbox-rg"
                $virtualNetworkId="$(az network vnet show -g $virtualNetworkRg -n $virtualNetworkName --query "id" -o tsv)"


                $body = [PSCustomObject]@{
                  location = $location
                  tags = @{
                    "application"  = "Cloud-Video-Platform"
                    "builtFrom"    = "hmcts/cvp-audio-ingress"
                    "businessArea" = "Cross-Cutting"
                    "criticality"  = "Low"
                    "environment"  = "sandbox"
                  }
                  properties = @{
                    virtualNetwork = @{
                      id = $virtualNetworkId
                    }
                    registrationEnabled = $false
                  }
                }


                $restUrl="https://management.azure.com/subscriptions/$subId/resourceGroups/$resourceGroupName/providers/Microsoft.Network/privateDnsZones/$privateDnsName/virtualNetworkLinks/$virtualNetworkLinkName`?api-version=2018-09-01"

                Write-Host "Request: $restUrl"
                $jsonBody = $body | ConvertTo-Json -Compress -Depth 100
                $jsonBody = $jsonBody -replace "`"","\`""
                Write-Host "Body: $jsonBody"

                az rest --method PUT --uri $restUrl --body $jsonBody --debug

              
          - template: ../steps/tf-install.yaml
          - template: ../steps/tf-init.yaml
            parameters:
              subscriptionName: ${{variables.subscriptionName}}
              env: ${{variables.env}}
              location: ${{variables.location}}
              locationEng: ${{variables.locationEng}}
              product: ${{variables.product}}
              useBackend: true
          
          - template: templates\Azure\Common\unlock-resource.yml@azTemplates
            parameters:
              subscriptionName:  ${{variables.subscriptionName}}
              resourceName: "${{variables.product}}recordings${{variables.env}}sa"
              resourceGroupName: "${{variables.product}}-recordings-${{variables.env}}-rg"
              lockName: "resource-sa"
              resourceType: "Microsoft.Storage/storageAccounts"
          - template: templates\Azure\Common\unlock-resource-group.yml@azTemplates
            parameters:
              subscriptionName:  ${{variables.subscriptionName}}
              resourceGroupName: "${{variables.product}}-recordings-${{variables.env}}-rg"
              lockName: "${{variables.env}}-lock"
          - template: templates\Azure\Common\unlock-resource-group.yml@azTemplates
            parameters:
              subscriptionName:  ${{variables.subscriptionName}}
              resourceGroupName: "managed-identities-${{variables.env}}-rg"
              lockName: "${{variables.env}}-lock"

          - template: ../steps/tf-plan.yaml
            parameters:
              subscriptionName: ${{variables.subscriptionName}}
              env: ${{variables.env}}
              location: ${{variables.location}}
              product: ${{variables.product}}
              builtFrom: $(Build.Repository.Name)
              # Manually passed in for use in scripts where resources are tagged
              businessArea: ${{variables.businessArea}}
              application: ${{variables.application}}

      - job: CertGen${{parameters.env}}
        displayName: 'Generate Certificate for ${{parameters.env}}'
        steps:
          - template: templates\Azure\Certificates\Request.yaml@azTemplates
            parameters:
              subscriptionName: ${{variables.subscriptionName}}
              product: "cvp"
              environment: ${{parameters.env}}
              domain: "${{ variables.dns }}"
              keyVaultName: "cvp-${{parameters.env}}-kv"