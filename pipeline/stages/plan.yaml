parameters:
  - name: env
    type: string
    default: 'sbox'
  - name: dependsOnEnv
    type: string
    default: ''
  - name: runStage
    type: string
    default: 'true'

stages:
  - ${{ if eq(parameters.runStage, true)}}:
 
    - stage: 'Plan${{parameters.env}}'
      displayName: 'Plan ${{parameters.env}}'
      ${{ if eq(parameters.dependsOnEnv, '') }}:
        dependsOn: Build
      ${{ if eq(parameters.dependsOnEnv, 'sbox') }}:
        dependsOn: 'Test${{parameters.dependsOnEnv}}'
      ${{ if eq(parameters.dependsOnEnv, 'stg') }}:
        dependsOn: 'Test${{parameters.dependsOnEnv}}'
      pool:
        vmImage: 'ubuntu-latest'
      condition: succeeded()
      variables:
        - template: ../variables/variables-common.yaml
        - template: ../variables/variables-${{parameters.env}}.yaml
        - group: cvp-${{parameters.env}}
      jobs:  
        - job: 'StartVM${{parameters.env}}'
          displayName: '${{parameters.env}} Turning Vm on'
          # dependsOn: VmOn1${{parameters.env}}
          pool:
            vmImage: 'ubuntu-latest'
          variables:
            - template: ../variables/variables-common.yaml
            - template: ../variables/variables-${{parameters.env}}.yaml
            - group: cvp-${{parameters.env}}
          steps:
            - template: ../steps/start-stop-vm.yaml
              parameters:
                env: ${{parameters.env}}
                pipelineStart: true
                subscriptionName: ${{variables.subscriptionName}}

        - job: PlanToEnv${{parameters.env}}
          displayName: 'Plan to ${{parameters.env}}'
          dependsOn: 'StartVM${{parameters.env}}' #DELETE
          steps:
            - template: ../steps/tf-install.yaml
            - template: ../steps/tf-init.yaml
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                location: ${{variables.location}}
                locationEng: ${{variables.locationEng}}
                product: ${{variables.product}}
                useBackend: true
            
            - template: templates\Azure\Common\unlock-resource.yml@azTemplates
              parameters:
                subscriptionName:  ${{variables.subscriptionName}}
                resourceName: "${{variables.product}}recordings${{variables.env}}sa"
                resourceGroupName: "${{variables.product}}-recordings-${{variables.env}}-rg"
                lockName: "resource-sa"
                resourceType: "Microsoft.Storage/storageAccounts"
            - template: templates\Azure\Common\unlock-resource-group.yml@azTemplates
              parameters:
                subscriptionName:  ${{variables.subscriptionName}}
                resourceGroupName: "${{variables.product}}-recordings-${{variables.env}}-rg"
                lockName: "${{variables.env}}-lock"
            - template: templates\Azure\Common\unlock-resource-group.yml@azTemplates
              parameters:
                subscriptionName:  ${{variables.subscriptionName}}
                resourceGroupName: "managed-identities-${{variables.env}}-rg"
                lockName: "${{variables.env}}-lock"

            - template: ../steps/tf-plan.yaml
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                location: ${{variables.location}}
                product: ${{variables.product}}
                builtFrom: $(Build.Repository.Name)
                # Manually passed in for use in scripts where resources are tagged
                businessArea: ${{variables.businessArea}}
                application: ${{variables.application}}

        - job: CertGen${{parameters.env}}
          displayName: 'Generate Certificate for ${{parameters.env}}'
          steps:
            - template: templates\Azure\Certificates\Request.yaml@azTemplates
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                product: "cvp"
                environment: ${{parameters.env}}
                domain: "${{ variables.dns }}"
                keyVaultName: "cvp-${{parameters.env}}-kv"

        # - job: VmOn1${{parameters.env}}
        #   displayName: 'Turn on VMs'
        #   dependsOn: PlanToEnv${{parameters.env}}
        #   steps:
        #   - task: AzureCLI@2
        #     name: 'VmOn${{parameters.env}}'
        #     displayName: 'Turning Vm On ${{parameters.env}}'
        #     condition: always()
        #     inputs:
        #       azureSubscription: '${{variables.subscriptionName}}'
        #       scriptType: pscore
        #       scriptLocation: inlineScript
        #       inlineScript: |
        #         $resourcegroup="cvp-recordings-${{parameters.env}}-rg"
        #         $rgExists = az group exists --name $resourcegroup

        #         if ( $rgExists )
        #         {
        #           Write-Output "$resourcegroup does exist in subscription"
        #           $vmList = az vm list --resource-group $resourcegroup  --query "[].{name:name}"  | ConvertFrom-Json
        #           $vmListCnt=$vmList.Count 
        #           Write-Output "$vmListCnt found in resource group"
        #           $timeToSleep = 1
        #           foreach ($vm in $vmList) {
        #               $vmName= $vm.name
        #               $vmDetails = az vm get-instance-view --name $vmName --resource-group $resourcegroup | ConvertFrom-Json
        #               $statusVm = $vmDetails.instanceView.statuses[1].Code
        #               Write-Output "Initial status for VM '$vmName'= $statusVm"
        #               if ( "PowerState/deallocated","PowerState/deallocating","PowerState/stopped","PowerState/stopping","PowerState/unknown" -contains $statusVm){
        #                 Write-Output "Starting VM '$vmName'"
        #                 az vm start --name $vmName --resource-group $resourcegroup
        #                 Write-Output "Mount wowza by running script on target vm; sudo sh /home/wowza/wowza-mount.sh"
        #                 az vm run-command invoke -g $resourcegroup -n $vmName  --command-id RunShellScript --scripts "sudo /home/wowza/runcmd.sh"
        #                 Write-Output ""
        #                 $timeToSleep = 90
        #               }
        #           }
        #           Start-Sleep -s $timeToSleep   
        #         }else
        #         {
        #             Write-Output "$resourcegroup does not exist in subscription"
        #         }

        #         Write-Output "Stage finished: Turning Vm On"

        # - job: 'StartVM${{parameters.env}}'
        #   displayName: '${{parameters.env}} Turning Vm on'
        #   dependsOn: VmOn1${{parameters.env}}
        #   pool:
        #     vmImage: 'ubuntu-latest'
        #   variables:
        #     - template: ../variables/variables-common.yaml
        #     - template: ../variables/variables-${{parameters.env}}.yaml
        #     - group: cvp-${{parameters.env}}
        #   steps:
        #     - template: ../steps/start-stop-vm.yaml
        #       parameters:
        #         env: ${{parameters.env}}
        #         pipelineStart: "true"

        # - ${{ if eq(variables.TURN_OFF_VM_POST_RUN, true) }}:
        #   - job: 'StopVM${{parameters.env}}'
        #     displayName: '${{parameters.env}} Turning Vm off'
        #     dependsOn: 'StartVM${{parameters.env}}'
        #     pool:
        #       vmImage: 'ubuntu-latest'
        #     variables:
        #       - template: ../variables/variables-common.yaml
        #       - template: ../variables/variables-${{parameters.env}}.yaml
        #       - group: cvp-${{parameters.env}}
        #     steps:
        #       - template: ../steps/start-stop-vm.yaml
        #         parameters:
        #           env: ${{parameters.env}}
        #           pipelineStart: "false"