parameters:
  - name: subscriptionName
    type: string
  - name: env
    type: string
  - name: location
    type: string
  - name: product
    type: string
  - name: builtFrom
    type: string
  - name: businessArea
    type: string
  - name: application
    type: string
  - name: workingDirectory
    type: string
    default: $(system.defaultWorkingDirectory)

steps:
  - task: AzurePowerShell@5
    displayName: 'Get Service Principal Details'
    inputs:
      azureSubscription: 'DTS-SHAREDSERVICES-SBOX'
      ScriptType: 'InlineScript'
      Inline: |
        $Context = Get-AzContext
        $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
        $ObjectId = $AzureDevOpsServicePrincipal.Id

        echo "##vso[task.setvariable variable=oid]$ObjectId"
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
  
  - task: AzureCLI@2
    displayName: 'Set Variables'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        
        echo "##vso[task.setvariable variable=rgName]$rgName"
        echo "##vso[task.setvariable variable=kvName]$kvName"
        
  ##TODO: move to Terraform
  - task: AzureCLI@2
    displayName: 'Create Shared Resource Group'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="$(rgName)"
        oid=$(oid)
        echo "Logged in as oid $oid"

        echo "Creating Shared RG $rgName"
        tags="businessArea=${{ parameters.businessArea }} application=${{ parameters.application }} builtFrom=${{ parameters.builtFrom }} environment=${{ parameters.env }}"
        az group create --location ${{ parameters.location }} --name $rgName  --subscription ${{ parameters.subscriptionName }} --tags $tags
  
  ##TODO: move to Terraform
  - task: AzureCLI@2
    displayName: 'Create Shared Key Vault'
    name: 'keyvault'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        if [[ ${{ parameters.env }} = "sbox" ]]; then envName="sandbox"; fi
        if [[ ${{ parameters.env }} = "stg" ]]; then envName="staging"; fi
        if [[ ${{ parameters.env }} = "prod" ]]; then envName="production"; fi

        businessArea=${{ parameters.businessArea }}
        application=${{ parameters.application }}
        builtFrom=${{ parameters.builtFrom }}

        rgName="$(rgName)"
        kvName="$(kvName)"
        oid=$(oid)
        echo "Logged in as oid $oid"
        echo "Env: $envName"
        tags="businessArea=${{ parameters.businessArea }} application='${{ parameters.application }}' builtFrom=${{ parameters.builtFrom }} environment=$envName"
        
        if [[ $(az keyvault list --resource-group $rgName --query "[?name=='$kvName'] | length(@)") > 0 ]]
		    then
			      echo "KV $kvName Already exists"
			      newKv=$(az keyvault show --name $kvName)
		    else
		      	echo "Creating Shared KV $kvName"
			      newKv=$(az keyvault create --location $location --name $kvName --resource-group $rgName  --subscription $sub --enabled-for-deployment true --enabled-for-template-deployment true --tags $tags)  
		    fi
        
        kvId=$(echo $newKv | jq .id | sed 's/"//g')
        echo "##vso[task.setvariable variable=kvId]$kvId"

        echo "Tagging $kvId"
		    az tag update --resource-id ${kvId//[$'\t\r\n']/} --operation replace --subscription ${{ parameters.subscriptionName }} --tags $tags 

        echo "Grant Service connection permissions on the KV"
        az keyvault set-policy --name $kvName \
          --certificate-permissions backup create get import list listissuers recover restore update \
          --secret-permissions backup delete get list recover restore set \
          --object-id $oid

        echo "Add build agent ip $agentIp to KV $kvName"
        agentIp=$(curl http://ifconfig.me/ip)/32
        az keyvault network-rule add \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp

        # Whitelist the subnet the VMs are on (if they are there)
        subnetId=$(az network vnet subnet show --resource-group "cvp-recordings-${{ parameters.env }}-rg" --vnet-name "cvp-recordings-${{ parameters.env }}-vnet" --name "wowza" --query id --output tsv)
        echo "Adding vm subnet ${subnetId} to KV"
        az keyvault network-rule add --resource-group $rgName --name $kvName --subnet $subnetId

        echo "Default Deny other traiffic apart form Azure Services"
        az keyvault update \
          --resource-group $rgName \
          --name $kvName \
          --bypass AzureServices \
          --default-action Deny


  - task: AzureCLI@2
    displayName: 'Create SSH Credentials'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="$(rgName)"
        kvName="$(kvName)"
        oid=$(oid)
        echo "Logged in as oid $oid"

        kvId=$(kvId)

        echo "Check if the ssh keypair is there, else generate one"
        sshPrivKeyName="cvp-ssh-priv-key"
        sshPubKeyName="cvp-ssh-pub-key"

        sshResult=$(az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv)
        echo "az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv"
        echo "sshResult = ${sshResult}"

        pubKey=$sshResult

        if [ "$sshResult" = "" ]; then
          echo "Create new SSH keypair"
          ssh-keygen -f ./cvp -t rsa -b 4096 -q -N ""
          az keyvault secret set --name ${sshPrivKeyName} --vault-name ${kvName} --file ./cvp
          az keyvault secret set --name ${sshPubKeyName} --vault-name ${kvName} --file ./cvp.pub
          pubKey=`cat ./cvp.pub`
        fi

        echo "##vso[task.setvariable variable=pubKey]$pubKey"

  - task: AzureCLI@2
    displayName: Get Log Analytics Workspace Subscription ID by name
    name: log_analytics
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        subscriptionId=$(az account show -s $(ws_sub_name) --query id -o tsv)

        echo "$(ws_sub_name) == ${subscriptionId}"
        echo "##vso[task.setvariable variable=ws_sub_id]$subscriptionId"
