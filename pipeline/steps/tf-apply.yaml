parameters:
  - name: subscriptionName
    type: string
  - name: env
    type: string
  - name: wowza_sku
    type: string
    default: 'linux-paid'
  - name: wowza_version
    type: string
    default: '4.7.7'
  - name: wowza_publisher
    type: string
    default: 'wowza'
  - name: wowza_offer
    type: string
    default: 'wowzastreamingengine'

steps:
  - task: AzureCLI@2
    displayName: Accept Terms of Wowza VM in Marketplace
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az vm image terms accept --urn ${{ parameters.wowza_publisher }}:${{ parameters.wowza_offer }}:${{ parameters.wowza_sku }}:${{ parameters.wowza_version }}

  - task: TerraformCLI@0
    displayName: Apply
    inputs:
      command: 'apply'
      environmentServiceName: ${{ parameters.subscriptionName }}
      commandOptions: '${{ parameters.env }}.tfplan -no-color'

  - task: AzureCLI@2
    displayName: 'Turn on Diagnostic settings'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="cvp-recordings-$(env)-rg"

        wsId=$(az monitor log-analytics workspace show --resource-group $(ws_rg) --workspace-name $(ws_name) --subscription $(ws_subscription) --query id -o tsv)
        kvId=$(az keyvault show --name "cvp-$(env)-kv" --resource-group cvp-sharedinfra-$(env) --query id -o tsv)

        echo "wsId=${wsId}"
        echo "kvId=${kvId}"
        az monitor diagnostic-settings create \
          --name cvp-kv-$(env)-diag-set \
          --resource $kvId \
          --logs    '[
            {
              "category": "AuditEvent",
              "enabled": true,
              "retentionPolicy": {
                "enabled": true,
                "days": 90
              }
            }
          ]' \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace "${wsId}"

        vm1Id=$(az vm show -g $rgName -n cvp-recordings-$(env)-vm1 --query id -o tsv)
        echo "vm1Id=${vm1Id}"
        az monitor diagnostic-settings create \
          --name cvp-vm1-$(env)-diag-set \
          --resource $vm1Id \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

        vm2Id=$(az vm show -g $rgName -n cvp-recordings-$(env)-vm2 --query id -o tsv)
        echo "vm2Id=${vm2Id}"
        az monitor diagnostic-settings create \
          --name cvp-vm2-$(env)-diag-set \
          --resource $vm2Id \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

        saId=$(az storage account show -g $rgName -n cvprecordings$(env)sa --query id -o tsv)
        echo "saId=${saId}"
        az monitor diagnostic-settings create \
          --name cvp-sa-$(env)-diag-set \
          --resource $saId \
          --metrics '[{"category": "Capacity","enabled": true},{"category": "Transaction","enabled": true}]' \
          --workspace $wsId

        blobId=$(az storage account blob-service-properties show -g $rgName -n cvprecordings$(env)sa --query id -o tsv)
        echo "blobId=${blobId}"
        az monitor diagnostic-settings create \
          --name cvp-blob-$(env)-diag-set \
          --resource $blobId \
          --logs    '[{"category": "StorageRead","enabled": true},{"category": "StorageWrite","enabled": true},{"category": "StorageDelete","enabled": true}]' \
          --metrics '[{"category": "Capacity","enabled": true},{"category": "Transaction","enabled": true}]' \
          --workspace $wsId

        pipId=$(az network public-ip show -g $rgName -n cvp-recordings-$(env)-pip --query id -o tsv)
        echo "pipId=${pipId}"
        az monitor diagnostic-settings create \
          --name cvp-pip-$(env)-diag-set \
          --resource $pipId \
          --logs    '[{"category": "DDoSProtectionNotifications","enabled": true},{"category": "DDoSMitigationFlowLogs","enabled": true},{"category": "DDoSMitigationReports","enabled": true}]' \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

        pipVm1Id=$(az network public-ip show -g $rgName -n cvp-recordings-$(env)-pipvm1 --query id -o tsv)
        echo "pipVm1Id=${pipVm1Id}"
        az monitor diagnostic-settings create \
          --name cvp-pipvm1-$(env)-diag-set \
          --resource $pipVm1Id \
          --logs    '[{"category": "DDoSProtectionNotifications","enabled": true},{"category": "DDoSMitigationFlowLogs","enabled": true},{"category": "DDoSMitigationReports","enabled": true}]' \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

        pipVm2Id=$(az network public-ip show -g $rgName -n cvp-recordings-$(env)-pipvm2 --query id -o tsv)
        echo "pipVm2Id=${pipVm2Id}"
        az monitor diagnostic-settings create \
          --name cvp-pipvm2-$(env)-diag-set \
          --resource $pipVm2Id \
          --logs    '[{"category": "DDoSProtectionNotifications","enabled": true},{"category": "DDoSMitigationFlowLogs","enabled": true},{"category": "DDoSMitigationReports","enabled": true}]' \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

        nsgId=$(az network nsg show -g $rgName -n cvp-recordings-$(env)-sg --query id -o tsv)
        echo "nsgId=${nsgId}"
        az monitor diagnostic-settings create \
          --name cvp-nsg-$(env)-diag-set \
          --resource $nsgId \
          --logs    '[{"category": "NetworkSecurityGroupEvent","enabled": true},{"category": "NetworkSecurityGroupRuleCounter","enabled": true}]' \
          --workspace $wsId

        privateEndpointId=$(az network private-endpoint show -g $rgName -n cvprecordings($env)sa-endpoint --query id -o tsv)
        echo "private endpoint=${privateEndpointId}"
        az monitor diagnostic-settings create \
          --name cvp-privep-$(env)-diag-set \
          --resource $privateEndpointId \
          --metrics  '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

        nic1Id=$(az network nic show -g $rgName -n cvp-recordings-$(env)-nic1 --query id -o tsv)
        echo "nic1Id=${nic1Id}"
        az monitor diagnostic-settings create \
          --name cvp-nic1-$(env)-diag-set \
          --resource $nic1Id \
          --metrics  '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

        nic2Id=$(az network nic show -g $rgName -n cvp-recordings-$(env)-nic2 --query id -o tsv)
        echo "nic2Id=${nic2Id}"
        az monitor diagnostic-settings create \
          --name cvp-nic2-$(env)-diag-set \
          --resource $nic2Id \
          --metrics  '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsIdoms-automation

        lbId=$(az network lb show -g $rgName -n cvp-recordings-$(env)-lb --query id -o tsv)
        echo "lbId=${lbId}"
        az monitor diagnostic-settings create \
          --name cvp-lb-$(env)-diag-set \
          --resource $lbId \
          --logs    '[{"category": "LoadBalancerAlertEvent","enabled": true},{"category": "LoadBalancerProbeHealthStatus","enabled": true}]' \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId

#        az vm extension set \
#          --resource-group $rgName \
#          --vm-name cvp-recordings-$(env)-vm1 \
#          --name OmsAgentForLinux \
#          --publisher Microsoft.EnterpriseCloud.Monitoring \
#          --version 1.10.1 --protected-settings '{"workspaceKey":"myWorkspaceKey"}' \
#          --settings '{"workspaceId":"${wsId}"}'