parameters:
  - name: subscriptionName
    type: string
  - name: env
    type: string
  - name: envLong
    type: string
  - name: location
    type: string
  - name: product
    type: string

steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |

        # ensure KV exists in same sub we are working in
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        az group create --location ${{ parameters.location }} --name ${{ parameters.product }}-sharedinfra-${{ parameters.env }}  --subscription ${{ parameters.subscriptionName }}
        az keyvault create --location ${{ parameters.location }} --name $kvName --resource-group $rgName --subscription ${{ parameters.subscriptionName }}
        az keyvault set-policy --name $kvName --certificate-permissions restore 

        # copy the cert from ctfapps
        az keyvault certificate backup --id https://cftapps-${{ parameters.env }}.vault.azure.net/certificates/STAR-${{ parameters.envLong }}-platform-hmcts-net -f cert.bak

        # import cert
        az keyvault certificate restore --file cert.bak --vault-name $kvName

        az keyvault certificate download --id https://$kvName.vault.azure.net/certificates/STAR-${{ parameters.envLong }}-platform-hmcts-net -f cert.pem
        certPath=`pwd`/cert.pem

        secretId=$(az keyvault certificate show --id https://$kvName.vault.azure.net/certificates/STAR-${{ parameters.envLong }}-platform-hmcts-net | jq .sid)

        echo "##vso[task.setvariable variable=certPath]$certPath"
        echo "##vso[task.setvariable variable=secretId]$secretId"

  - task: TerraformCLI@0
    displayName: Plan
    inputs:
      command: 'plan'
      environmentServiceName: ${{ parameters.subscriptionName }}
      commandOptions: '-var-file="${{ parameters.env}}.tfvars" -var "cert_path=$(certPath)" -var "service_certificate_kv_url=$(secretId)" -out="${{ parameters.env }}.tfplan" -no-color -input=false'
      # @todo move the tfvars file into pipeline vars and pass in here