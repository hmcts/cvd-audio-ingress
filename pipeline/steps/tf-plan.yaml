parameters:
  - name: subscriptionName
    type: string
  - name: env
    type: string
  - name: certName
    type: string
  - name: location
    type: string
  - name: product
    type: string

steps:
  - task: AzureCLI@2
    displayName: 'Turn on Diagnostic settings'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="cvp-recordings-$(env)-rg"

        wsId=$(az monitor log-analytics workspace show --resource-group $(ws_rg) --workspace-name $(ws_name) --subscription $(ws_subscription) -o tsv  | jq .id)
        kvId=$(az keyvault show --name "cvp-$(env)-kv" --resource-group cvp-sharedinfra-$(env) -o tsv | jq .id)

        echo "wsId=${wsId}"
        echo "kvId=${kvId}"
        #        az monitor diagnostic-settings create \
        #          --name "cvp-kv-$(env)-diag-set" \
        #          --resource "${kvId}" \
        #          --logs    '[ \
        #            { \
        #              "category": "AuditEvent", \
        #              "enabled": true, \
        #              "retentionPolicy": { \
        #                "enabled": true, \
        #                "days": 90 \
        #              } \
        #            } \
        #          ]' \
        #          --metrics '[{"category": "AllMetrics","enabled": true}]' \
        #          --workspace "${wsId}" \
        #          --debug

        vm1Id=$(az vm show -g $rgName -n cvp-recordings-$(env)-vm1 -o tsv | jq .id)
        az monitor diagnostic-settings create \
          --name cvp-vm1-$(env)-diag-set \
          --resource $vm1Id \
          --metrics '[{"category": "AllMetrics","enabled": true}]' \
          --workspace $wsId
#
#        vm2Id=$(az vm show -g $rgName -n cvp-recordings-$(env)-vm2 | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-vm2-$(env)-diag-set \
#          --resource $vm2Id \
#          --metrics '[{"category": "AllMetrics","enabled": true}]' \
#          --workspace $wsId
#
#        saId=$(az storage account show -g $rgName -n cvprecordings$(env)sa | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-sa-$(env)-diag-set \
#          --resource $saId \
#          --metrics '[{"category": "Capacity","enabled": true},{"category": "Transaction","enabled": true}]' \
#          --workspace $wsId
#
#        blobId=$(az storage account blob-service-properties show -g $rgName -n cvprecordings$(env)sa | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-blob-$(env)-diag-set \
#          --resource $blobId \
#          --logs    '[{"category": "StorageRead","enabled": true},{"category": "StorageWrite","enabled": true},{"category": "StorageDelete","enabled": true}]' \
#          --metrics '[{"category": "Capacity","enabled": true},{"category": "Transaction","enabled": true}]' \
#          --workspace $wsId
#
#        pipId=$(az network public-ip show -g $rgName -n cvp-recordings-$(env)-pip | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-pip-$(env)-diag-set \
#          --resource $pipId \
#          --logs    '[{"category": "DDoSProtectionNotifications","enabled": true},{"category": "DDoSMitigationFlowLogs","enabled": true},{"category": "DDoSMitigationReports","enabled": true}]' \
#          --metrics '[{"category": "AllMetrics","enabled": true}]' \
#          --workspace $wsId
#
#        pipVm1Id=$(az network public-ip show -g $rgName -n cvp-recordings-$(env)-pipvm1 | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-pipvm1-$(env)-diag-set \
#          --resource $pipVm1Id \
#          --logs    '[{"category": "DDoSProtectionNotifications","enabled": true},{"category": "DDoSMitigationFlowLogs","enabled": true},{"category": "DDoSMitigationReports","enabled": true}]' \
#          --metrics '[{"category": "AllMetrics","enabled": true}]' \
#          --workspace $wsId
#
#        pipVm2Id=$(az network public-ip show -g $rgName -n cvp-recordings-$(env)-pipvm2 | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-pipvm2-$(env)-diag-set \
#          --resource $pipVm2Id \
#          --logs    '[{"category": "DDoSProtectionNotifications","enabled": true},{"category": "DDoSMitigationFlowLogs","enabled": true},{"category": "DDoSMitigationReports","enabled": true}]' \
#          --metrics '[{"category": "AllMetrics","enabled": true}]' \
#          --workspace $wsId
#
#        nsgId=$(az network nsg show -g $rgName -n cvp-recordings-$(env)-sg | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-nsg-$(env)-diag-set \
#          --resource $nsgId \
#          --logs    '[{"category": "NetworkSecurityGroupEvent","enabled": true},{"category": "NetworkSecurityGroupRuleCounter","enabled": true}]' \
#          --workspace $wsId
#
#        privateEndpointId=$(az network private-endpoint show -g $rgName -n cvprecordings($env)sa-endpoint | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-privep-$(env)-diag-set \
#          --resource $privateEndpointId \
#          --metrics  '[{"category": "AllMetrics","enabled": true}' \
#          --workspace $wsId
#
#        nic1Id=$(az network nic show -g $rgName -n cvp-recordings-$(env)-nic1 | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-nic1-$(env)-diag-set \
#          --resource $nic1Id \
#          --metrics  '[{"category": "AllMetrics","enabled": true}' \
#          --workspace $wsId
#
#        nic2Id=$(az network nic show -g $rgName -n cvp-recordings-$(env)-nic2 | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-nic2-$(env)-diag-set \
#          --resource $nic2Id \
#          --metrics  '[{"category": "AllMetrics","enabled": true}' \
#          --workspace $wsIdoms-automation
#
#        lbId=$(az network lb show -g $rgName -n cvp-recordings-$(env)-lb | jq .id)
#        az monitor diagnostic-settings create \
#          --name cvp-lb-$(env)-diag-set \
#          --resource $lbId \
#          --logs    '[{"category": "LoadBalancerAlertEvent","enabled": true},{"category": "LoadBalancerProbeHealthStatus","enabled": true}]' \
#          --metrics '[{"category": "AllMetrics","enabled": true}]' \
#          --workspace $wsId
#
#        az vm extension set \
#          --resource-group $rgName \
#          --vm-name cvp-recordings-$(env)-vm1 \
#          --name OmsAgentForLinux \
#          --publisher Microsoft.EnterpriseCloud.Monitoring \
#          --version 1.10.1 --protected-settings '{"workspaceKey":"myWorkspaceKey"}' \
#          --settings '{"workspaceId":"${wsId}"}'

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'DTS-SHAREDSERVICES-SBOX'
      ScriptType: 'InlineScript'
      Inline: |
        $Context = Get-AzContext
        $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
        $ObjectId = $AzureDevOpsServicePrincipal.Id

        echo "##vso[task.setvariable variable=oid]$ObjectId"
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true

  - task: AzureCLI@2
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |

        # echo "SECRETS ###########"
        # az keyvault secret list --vault-name cft-apps-${{ parameters.env }}
        # echo "CERTS ###########"
        # az keyvault certificate list --vault-name cft-apps-${{ parameters.env }}

        # ensure KV exists in same sub we are working in
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        oid=$(oid)
        echo "Logged in as oid $oid"
        az group create --location ${{ parameters.location }} --name ${{ parameters.product }}-sharedinfra-${{ parameters.env }}  --subscription ${{ parameters.subscriptionName }}
        newKv=$(az keyvault create --location ${{ parameters.location }} --name $kvName --resource-group $rgName --subscription ${{ parameters.subscriptionName }} --enabled-for-deployment true --enabled-for-template-deployment true)
        az keyvault set-policy --name $kvName \
          --certificate-permissions backup create get import list listissuers recover restore update \
          --secret-permissions backup delete get list recover restore set \
          --object-id $oid

        # white list this build agent
        agentIp=$(curl http://ifconfig.me/ip)/32
        az keyvault network-rule add \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp
        echo "Adding agent ip $agentIp to KV"

        # Whitelist the subnet the VMs are on (if they are there)
        subnetId=$(az network vnet subnet show --resource-group "cvp-recordings-${{ parameters.env }}-rg" --vnet-name "cvp-recordings-${{ parameters.env }}-vnet" --name "wowza" --query id --output tsv)
        az keyvault network-rule add --resource-group $rgName --name $kvName --subnet $subnetId
        echo "Adding vm subnet ${subnetId} to KV"

        az keyvault update \
          --resource-group $rgName \
          --name $kvName \
          --bypass AzureServices \
          --default-action Deny

        # copy the cert from ctfapps
        az keyvault secret download --id https://cft-apps-${{ parameters.env }}.vault.azure.net/secrets/${{ parameters.certName }} -f cert.pfx

        base64 -d cert.pfx > cert-up.pfx

        # import cert
        az keyvault certificate import --file cert-up.pfx --vault-name $kvName --name ${{ parameters.certName }} --verbose

        az keyvault certificate download --id https://$kvName.vault.azure.net/certificates/${{ parameters.certName }} -f cert.pem
        certPath=`pwd`/cert.pem

        cert=$(az keyvault certificate show --id https://$kvName.vault.azure.net/certificates/${{ parameters.certName }})
        thumbprint=$(echo $cert | jq .x509ThumbprintHex)
        secretId=$(echo $cert | jq .sid)

        kvId=$(echo $newKv | jq .id)

        # check if the ssh keypair is there, else generate one
        sshPrivKeyName="cvp-ssh-priv-key"
        sshPubKeyName="cvp-ssh-pub-key"

        sshResult=$(az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv)
        echo "az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv"
        echo "sshResult = ${sshResult}"

        pubKey=$sshResult

        if [ "$sshResult" = "" ]; then
          ssh-keygen -f ./cvp -t rsa -b 4096 -q -N ""
          az keyvault secret set --name ${sshPrivKeyName} --vault-name ${kvName} --file ./cvp
          az keyvault secret set --name ${sshPubKeyName} --vault-name ${kvName} --file ./cvp.pub
          pubKey=`cat ./cvp.pub`
        fi

        echo "pubKey = ${pubKey}"

        echo "##vso[task.setvariable variable=certPath]$certPath"
        echo "##vso[task.setvariable variable=secretId]$secretId"
        echo "##vso[task.setvariable variable=thumbprint]$thumbprint"
        echo "##vso[task.setvariable variable=kvId]$kvId"
        echo "##vso[task.setvariable variable=pubKey]$pubKey"

  - task: AzureCLI@2
    condition: always()
    displayName: Remove Build Agent IP from KV whitelist
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        agentIp=$(curl http://ifconfig.me/ip)/32
        echo "Removing agent ip $agentIp from KV"
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        az keyvault network-rule remove \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp

  - task: TerraformCLI@0
    displayName: Plan
    inputs:
      command: 'plan'
      environmentServiceName: ${{ parameters.subscriptionName }}
      commandOptions: '-var "common_tags={\"environment\":\"${{ parameters.env }}\",\"teamName\":\"$(product)\",\"BuiltFrom\":\"$(builtFrom)\"}" -var "location=$(location)" -var "product=$(product)" -var "env=${{ parameters.env }}" -var "cert_path=$(certPath)" -var "service_certificate_kv_url=$(secretId)" -var "thumbprint=$(thumbprint)" -var "key_vault_id=$(kvId)" -var "wowza_sku=$(wowza_sku)" -var "wowza_version=$(wowza_version)" -var "wowza_publisher=$(wowza_publisher)" -var "wowza_offer=$(wowza_offer)" -var "dns_zone_name=$(dns_zone_name)" -var "dns_resource_group=$(dns_resource_group)" -var "address_space=$(address_space)" -var "num_applications=$(num_applications)" -var "ssh_public_key=$(pubKey)" -var "logging_enabled=$(logging_enabled)" -var "rtmps_source_address_prefixes=[$(rtmps_source_address_prefixes)]" -out="${{ parameters.env }}.tfplan" -no-color -input=false'
