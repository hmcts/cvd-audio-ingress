parameters:
  - name: subscriptionName
    type: string
  - name: env
    type: string
  - name: certName
    type: string
  - name: location
    type: string
  - name: product
    type: string

steps:
  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'DTS-SHAREDSERVICES-SBOX'
      ScriptType: 'InlineScript'
      Inline: |
        $Context = Get-AzContext
        $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
        $ObjectId = $AzureDevOpsServicePrincipal.Id

        echo "##vso[task.setvariable variable=oid]$ObjectId"
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true

  - task: AzureCLI@2
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |

        # ensure KV exists in same sub we are working in
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        oid=$(oid)
        echo "Logged in as oid $oid"
        az group create --location ${{ parameters.location }} --name ${{ parameters.product }}-sharedinfra-${{ parameters.env }}  --subscription ${{ parameters.subscriptionName }}
        newKv=$(az keyvault create --location ${{ parameters.location }} --name $kvName --resource-group $rgName --subscription ${{ parameters.subscriptionName }} --enabled-for-deployment true --enabled-for-template-deployment true)
        az keyvault set-policy --name $kvName \
          --certificate-permissions backup create get import list listissuers recover restore update \
          --secret-permissions backup delete get list recover restore set \
          --object-id $oid

        # white list this build agent
        agentIp=$(curl http://ifconfig.me/ip)/32
        az keyvault network-rule add \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp
        echo "Adding agent ip $agentIp to KV"

        # Whitelist the subnet the VMs are on (if they are there)
        subnetId=$(az network vnet subnet show --resource-group "cvp-recordings-${{ parameters.env }}-rg" --vnet-name "cvp-recordings-${{ parameters.env }}-vnet" --name "wowza" --query id --output tsv)
        az keyvault network-rule add --resource-group $rgName --name $kvName --subnet $subnetId
        echo "Adding vm subnet ${subnetId} to KV"

        az keyvault update \
          --resource-group $rgName \
          --name $kvName \
          --bypass AzureServices \
          --default-action Deny

        # echo "SECRETS ###########"
        # az keyvault secret list --vault-name cftapps-${{ parameters.env }}
        # echo "CERTS ###########"
        # az keyvault certificate list --vault-name cftapps-${{ parameters.env }}

        # copy the cert from ctfapps
        az keyvault secret download --id https://cftapps-${{ parameters.env }}.vault.azure.net/secrets/${{ parameters.certName }} -f cert.pfx

        base64 -d cert.pfx > cert-up.pfx

        # import cert
        az keyvault certificate import --file cert-up.pfx --vault-name $kvName --name ${{ parameters.certName }} --verbose

        az keyvault certificate download --id https://$kvName.vault.azure.net/certificates/${{ parameters.certName }} -f cert.pem
        certPath=`pwd`/cert.pem

        cert=$(az keyvault certificate show --id https://$kvName.vault.azure.net/certificates/${{ parameters.certName }})
        thumbprint=$(echo $cert | jq .x509ThumbprintHex)
        secretId=$(echo $cert | jq .sid)

        kvId=$(echo $newKv | jq .id)

        # check if the ssh keypair is there, else generate one
        sshPrivKeyName="cvp-ssh-priv-key"
        sshPubKeyName="cvp-ssh-pub-key"

        sshResult=$(az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv)
        echo "az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv"
        echo "sshResult = ${sshResult}"

        pubKey=$sshResult

        if [ "$sshResult" = "" ]; then
          ssh-keygen -f ./cvp -t rsa -b 4096 -q -N ""
          az keyvault secret set --name ${sshPrivKeyName} --vault-name ${kvName} --file ./cvp
          az keyvault secret set --name ${sshPubKeyName} --vault-name ${kvName} --file ./cvp.pub
          pubKey=`cat ./cvp.pub`
        fi

        echo "pubKey = ${pubKey}"

        echo "##vso[task.setvariable variable=certPath]$certPath"
        echo "##vso[task.setvariable variable=secretId]$secretId"
        echo "##vso[task.setvariable variable=thumbprint]$thumbprint"
        echo "##vso[task.setvariable variable=kvId]$kvId"
        echo "##vso[task.setvariable variable=pubKey]$pubKey"

        prefixes="[$(rtmps_source_address_prefixes)]"
        echo "##vso[task.setvariable variable=prefixes]$prefixes"

  - task: AzureCLI@2
    condition: always()
    displayName: Remove Build Agent IP from KV whitelist
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        agentIp=$(curl http://ifconfig.me/ip)/32
        echo "Removing agent ip $agentIp from KV"
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        az keyvault network-rule remove \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp

  - task: TerraformCLI@0
    displayName: Plan
    inputs:
      command: 'plan'
      environmentServiceName: ${{ parameters.subscriptionName }}
      commandOptions: "-var 'common_tags={\"environment\":\"${{ parameters.env }}\",\"teamName\":\"$(product)\",\"BuiltFrom\":\"$(builtFrom)\"}' -var 'location=$(location)' -var 'product=$(product)' -var 'env=${{ parameters.env }}' -var 'cert_path=$(certPath)' -var 'service_certificate_kv_url=$(secretId)' -var 'thumbprint=$(thumbprint)' -var 'key_vault_id=$(kvId)' -var 'wowza_version=$(wowza_version)' -var 'wowza_publisher=$(wowza_publisher)' -var 'wowza_offer=$(wowza_offer)' -var 'dns_zone_name=$(dns_zone_name)' -var 'dns_resource_group=$(dns_resource_group)' -var 'address_space=$(address_space)' -var 'num_applications=$(num_applications)' -var 'ssh_public_key=$(pubKey)' -var 'logging_enabled=$(logging_enabled)' -var 'rtmps_source_address_prefixes=$prefixes' -out='${{ parameters.env }}.tfplan' -no-color -input=false"

  /usr/local/bin/terraform plan -var 'common_tags={environment:sbox,teamName:cvp,BuiltFrom:https://github.com/hmcts/cvp-audio-ingress}' -var 'location=uksouth' -var 'product=cvp' -var 'env=sbox' -var 'cert_path=/home/vsts/work/1/s/cert.pem' -var 'service_certificate_kv_url=https://cvp-sbox-kv.vault.azure.net/secrets/STAR-sandbox-platform-hmcts-net/c745a4f735d644de8345273977947eb1' -var 'thumbprint=3F77FABA764DA34AABC8B7073A122D967DE8FB61' -var 'key_vault_id=/subscriptions/a8140a9e-f1b0-481f-a4de-09e2ee23f7ab/resourceGroups/cvp-sharedinfra-sbox/providers/Microsoft.KeyVault/vaults/cvp-sbox-kv' -var 'wowza_sku=linux-paid' -var 'wowza_version=4.7.7' -var 'wowza_publisher=wowza' -var 'wowza_offer=wowzastreamingengine' -var 'dns_zone_name=shared-services.uk.south.sbox.hmcts.internal' -var 'dns_resource_group=shared-services_sbox_network_resource_group' -var 'address_space=10.50.11.0/28' -var 'num_applications=20' -var 'ssh_public_key=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQD4oMkJFS39fpsMgDWZhpAmr22w6jsR3QCnkJ75REwFQCkRQrQDvJC6KJUSJJQSKtlITf+1Ci2lCPLoY0dc1aLu0+SCjyBU8O39UJLFbjSe2SQg741VuGl7sTdEXxvyZfb5qO1f+N6oI1IjadFeQAJcsyB3+KHv15i/sKTXPIfpDxV77fXnregA4J5ADX6YCQHmaejlJAEKU5AkOEp6kmiqiRkV1g3KbgqsXKLH82btFXGXJK5LeCdPN6R3dsovwSWPVx+YUCrE1vcflyKsDqLhzXhk/LRMrOHaV+ChNXbIEiVBdqcLrLibdEkIGODgf15mM7Dq88CANFo5iAaXkeAXMriDQ3AhFtXHxUSv5Nsh1qrN5VjhkZkk+3fr8E5jpDDNubNsT2VFL2JlELK+u1aJXsOOpMDNfEpVAtUmSmQ5BebuwUvtZMlnHhHLi///fWZ89jdFOtYFe8zv1B2xlw7Qb24EXn10dOHfREB2RpUU452HCMuNXzDXLMPBGZynn6Mex5vM7WWLVvXerr+3o8UZkKvqSvg2kQJyAMsx04EbIg6yhxhTGFMyRTRFCQ/mMAX+94nhzjSGQNbzEmXvLbzt8QsU25P6c8isIfvs+tep8R1Bbb0zZJtMKu6X1u9Vv7+xR+TyUh1cy2tBd6NTU1oed9YjuMuinBubUHe43akURw== vsts@fv-az29' -var 'logging_enabled=true' -var 'rtmps_source_address_prefixes=[***]' -out='sbox.tfplan' -no-color -input=false
